/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not16(in=instruction, out[15]=isValueInstruction);

    Mux16(a=instruction, b=false, sel=isValueInstruction,
    out[12]=a,
    out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6,
    out[5]=d1, out[4]=d2, out[3]=d3,
    out[3]=writeM,
    out[2]=j1, out[1]=j2, out[0]=j3);

    Mux16(a=aRegPrev, b=instruction, sel=isValueInstruction, out=aRegNext0);
    Mux16(a=DRegValue, b=aRegNext0, sel=d2, out=dRegNext0);

    Mux16(a=aRegNext0, b=inM, sel=a, out=aluInputAOrM);
    ALU(x=DRegValue, y=aluInputAOrM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, zr=zr, ng=ng, out=outM, out=aluOut);

    Mux16(a=aRegNext0, b=aluOut, sel=d1, out=aRegNext);
    Mux16(a=dRegNext0, b=aluOut, sel=d2, out=dRegNext);

    DRegister(in=dRegNext, load=d2, out=DRegValue);
    ARegister(in=aRegNext, load=true, out=ARegValue, out[0..14]=addressM, out=aRegPrev);

    // Jumping
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=notzr, b=notng, out=positive);

    And(a=ng, b=j1, out=jump1);
    And(a=zr, b=j2, out=jump2);
    And(a=positive, b=j3, out=jump3);

    Or(a=jump1, b=jump2, out=jump4);
    Or(a=jump3, b=jump4, out=jump);
    Not(in=jump, out=notjump);

    // increment program counter
    Mux16(a=false, a=pcfullPrev, b=ARegValue, sel=jump, out=pcfull);
    PC(in=pcfull, load=jump, inc=notjump, reset=reset, out=pcfullPrev, out[0..14]=pc);
}
